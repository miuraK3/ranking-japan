{"version":3,"sources":["App.js","index.js"],"names":["Hero","className","Footer","AboutData","ChoroplethMap","features","width","height","projection","d3","scale","center","translate","path","color","domain","feature","properties","value","range","radius","rice","RankingData","map","item","都道府県","都道府県名","米","x","経度","y","緯度","sort","a","b","i","d","fill","stroke","transform","fontSize","cx","cy","r","opacity","ChoroplethMapPage","useState","setFeatures","useEffect","fetch","process","res","json","data","topojson","objects","japan","AboutLocalResources","React","val","setVal","handleChange","e","includes","target","filter","onreset","type","onChange","checked","join","AboutAwareness","flag","add","event","id","onClick","AboutTotal","BeforePressingButton","Button","nowShowing","App","setNowShowing","render","document","querySelector"],"mappings":"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","file":"static/js/main.711bab76.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { areaRadial } from \"d3\";\n\nimport RankingData from \"./data.json\"\n//onst rData = RankingData;\n//console.log(rData);\n\nconst Hero = () => {\n    return (\n      <section className = \"hero is-fluid is-danger\">\n          <div className = \"hero-body\">\n              <div className = \"container has-text-centered s-divider\">\n                  <h1 className = \"title\">魅力度ランキング</h1>\n                  <h2 className = \"subtitle\">47都道府県比較サイト</h2>\n              </div>\n          </div>\n      </section>\n    );\n};\n\nconst Footer = () => {\n    return (\n      <footer className = \"footer\">\n        <div className = \"content has-text-centered\">\n            <p>&copy; 2021 kouzuki miura</p>\n        </div>\n      </footer>\n    );\n}\n\nconst AboutData = () => {\n    return (\n      <section className=\"section\">\n        <div className=\"container has-text-centered\">\n          <h1 className=\"title\">データ元</h1>\n          <h2 className=\"subtitle\">参考データについて...</h2>\n        </div>\n      </section>\n    );\n}\n\n//日本地図を描くプログラム\nconst ChoroplethMap = ({ features }) => {\n  const width = 1000;\n  const height = 900;\n  const projection = d3.geoMercator().scale(1600).center([139.69167, 35.68944]).translate([width/2, height/2]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#0f0\"]);\n  \n  //印\n  const radius = 25;\n  //米のみの場合で考えると？\n  const rData = RankingData;\n  const rice = rData.map((item) => {\n    const obj = {\n      都道府県:item.都道府県名,\n      米:item.米,\n      x:item.経度,\n      y:item.緯度\n    }\n    return obj;\n  });\n  //降順にソート \n  const r = rice.sort((a,b) => (b.米) - (a.米));\n  //console.log(r);\n  //〜印\n\n  return (\n    <svg width={width} height={height}>\n      <g>\n        {features.map((feature, i) => (\n          <path\n            key={i}\n            d={path(feature)}\n            fill={color(feature.properties.value)}\n            stroke=\"#7F7F7F\"\n          />\n        ))}\n      </g>\n      \n      {/*印の大きさについて*/}\n        <g transform=\"translate(width/2,height)\">\n            <text x={width-250} y={height-500} fontSize=\"20\">円の大きさ・色について</text>\n\n            <circle cx={width-250} cy={height-450} r={radius-5} fill=\"red\" opacity=\"0.5\"/>\n            <text x={width-250+radius} y={height-450} fontSize=\"20\">1位</text>\n\n            <circle cx={width-250} cy={height-400} r={radius-5} fill=\"blue\" opacity=\"0.5\"/>\n            <text x={width-250+radius} y={height-400} fontSize=\"20\">2位</text>\n\n            <circle cx={width-250} cy={height-350} r={radius-5} fill=\"yellow\" opacity=\"0.5\"/>\n            <text x={width-250+radius} y= {height-350}fontSize=\"20\">3位</text>\n\n            <circle cx={width-250} cy={height-300} r={radius-10} fill=\"black\" opacity=\"0.5\"/>\n            <text x={width-250+radius-10} y={height-300} fontSize=\"20\">3~10位</text>\n\n            <circle cx={width-250} cy={height-250} r={radius-15} fill=\"black\" opacity=\"0.5\"/>\n            <text x={width-250+radius-15} y={height-250} fontSize=\"20\">10~20位</text>\n\n            <circle cx={width-250} cy={height-200} r={radius-18} fill=\"black\" opacity=\"0.5\"/>\n            <text x={width-250+radius-18} y={height-200} fontSize=\"20\">20~30位</text>\n\n            <circle cx={width-250} cy={height-150} r={radius-20} fill=\"black\" opacity=\"0.5\"/>\n            <text x={width-250+radius-20} y={height-150} fontSize=\"20\">30~40位</text>\n        </g>\n        {/*〜印の大きさについて*/}\n\n        {/*印（米のみの場合）*/}\n        <g>\n          {rice.map((item,i) => {\n            //x=経度 y=緯度\n            const x = projection([rice[i].x, rice[i].y])[0];\n            const y = projection([rice[i].x, rice[i].y])[1];\n            //console.log(x,y);\n            return <circle cx={x} cy={y} r={radius} fill=\"red\" opacity=\"0.5\"/>;\n          })}\n        </g>\n      {/*〜印（米のみの場合）*/}\n    </svg>\n  );\n};\nexport const ChoroplethMapPage = () => {\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async() => {\n      const res = await fetch(`${process.env.PUBLIC_URL}/data/japan.json`)\n      const data = await res.json()\n      const { features } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })()\n  },[])\n  if (features == null) {\n    return <p>loading</p>;\n  }\n  return <ChoroplethMap features={features} />;\n};\n//〜日本地図を描くプログラム\n\n\n//地域資源についてのプログラム\nconst AboutLocalResources = () => {\n  //const rData = RankingData;\n\n  const [val, setVal] = React.useState([]);\n  const handleChange = e => {\n    //ONかOFFか\n    if (val.includes(e.target.value)) {\n      // すでに含まれていればOFFしたと判断し、イベント発行元を除いた配列をsetし直す\n      setVal(val.filter(item => item !== e.target.value));\n    } else {\n      // そうでなければONと判断し、イベント発行元を末尾に加えた配列をsetし直す\n      setVal([...val, e.target.value]);\n      // stateは直接は編集できない( = val.push(e.target.value) はNG)\n    }\n  };\n  \n  const drawGraph = (e) => {\n    //日本地図を書くプログラム\n  }\n  return ( \n    <div className=\"tile is-parent is-vertical\">\n      <article className=\"tile is-child notification is-grey has-text-centered\">\n        <div>\n        <form onreset = \"reset\">\n        <label>\n          <input type=\"checkbox\" value=\"火力\" onChange={handleChange} checked={val.includes('火力')}/>\n          火力\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"水力\" onChange={handleChange} checked={val.includes('水力')} />\n          水力\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"風力\" onChange={handleChange} checked={val.includes('風力')} />\n          風力\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"原子力\" onChange={handleChange} checked={val.includes('原子力')} />\n          原子力\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"太陽光\" onChange={handleChange} checked={val.includes('太陽光')} />\n          太陽光\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"地熱\" onChange={handleChange} checked={val.includes('地熱')} />\n          地熱\n        </label>\n        <br/>\n        <label>\n          <input type=\"checkbox\" value=\"米\" onChange={handleChange} checked={val.includes('米')} />\n          米\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"牛乳\" onChange={handleChange} checked={val.includes('牛乳')} />\n          牛乳\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"肉用牛\" onChange={handleChange} checked={val.includes('肉用牛')} />\n          肉用牛\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"豚\" onChange={handleChange} checked={val.includes('豚')} />\n          豚\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"鶏卵\" onChange={handleChange} checked={val.includes('鶏卵')} />\n          鶏卵\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"プロイラー\" onChange={handleChange} checked={val.includes('プロイラー')} />\n          プロイラー\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"トマト\" onChange={handleChange} checked={val.includes('トマト')} />\n          トマト\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"乳牛\" onChange={handleChange} checked={val.includes('乳牛')} />\n          乳牛\n        </label>\n        <label>\n          <input type=\"checkbox\" value=\"いちご\" onChange={handleChange} checked={val.includes('いちご')} />\n          いちご\n        </label>\n      <p>選択値：{val.join(', ')}</p>\n        </form>\n        </div>\n        <ChoroplethMapPage /> \n      </article>\n    </div>\n  );\n}\n\n//認知度についてのプログラム\nconst AboutAwareness = () => {\n  const data = []\n  var flag = [0, 0, 0, 0, 0, 0, 0, 0]\n  const add = (event) => {\n    if(flag[event.target.value - 1] === 0){\n      //data変数にデータを代入（初期化？）\n\n    }else{\n      data.map((item, i) => {\n        //チェックした内容と一致するデータのみを取得\n      })\n    }\n    //flag[event.target.value - 1] = 1\n  }\n  const drawGraph = (e) => {\n    //日本地図を書くプログラム\n  }\n  return (\n    <div className=\"tile is-parent is-vertical\">\n      <article className=\"tile is-child notification is-grey has-text-centered\">\n        <div>\n        <form onreset = \"reset\">\n              <input type = \"checkbox\" value = \"1\" id=\"Youtube登録者数\" onClick = {add} />\n              Youtube登録者数\n              <input type = \"checkbox\" value = \"2\" id=\"Youtube最高再生数\" onClick = {add} />\n              Youtube最高再生数\n              <br/>\n              <input type = \"checkbox\" value = \"3\" id=\"Twitterフォロワー数\" onClick = {add} />\n              Twitterフォロワー数\n              <input type = \"checkbox\" value = \"4\" id=\"Twitterツイート数\" onClick = {add} />\n              Twitterツイート数\n              <input type = \"checkbox\" value = \"5\" id=\"Twitter開始年月\" onClick = {add} />\n              Twitter開始年月\n              <br/>\n              <input type = \"checkbox\" value = \"6\" id=\"全国国内線乗降客数\" onClick = {add} />\n              全国国内線乗降客数\n              <input type = \"checkbox\" value = \"7\" id=\"外国人訪問率\" onClick = {add} />\n              外国人訪問率\n              <input type = \"checkbox\" value = \"8\" id=\"芸能人\" onClick = {add} />\n              芸能人\n              <br/>\n            <button type = \"reset\">描画</button>\n            {/*onClick = {drawGraph} を追加*/}\n        </form>\n        </div>\n        <ChoroplethMapPage /> \n      </article>\n    </div>\n  );\n}\n\n//総合点についてのプログラム\nconst AboutTotal = () => {\n  const data = []\n  var flag = [0, 0, 0, 0, 0, 0, 0, 0]\n  const add = (event) => {\n    if(flag[event.target.value - 1] === 0){\n      //data変数にデータを代入（初期化？）\n\n    }else{\n      data.map((item, i) => {\n        //チェックした内容と一致するデータのみを取得\n      })\n    }\n    //flag[event.target.value - 1] = 1\n  }\n  const drawGraph = (e) => {\n    //日本地図を書くプログラム\n  }\n  return (\n      <div className=\"tile is-parent is-vertical\">\n        <article className=\"tile is-child notification is-grey has-text-centered\">\n          <div>\n          <form onreset = \"reset\">\n              <input type = \"checkbox\" value = \"1\" id=\"Youtube登録者数\" onClick = {add} />\n              Youtube登録者数\n              <input type = \"checkbox\" value = \"2\" id=\"Youtube最高再生数\" onClick = {add} />\n              Youtube最高再生数\n              <br/>\n              <input type = \"checkbox\" value = \"3\" id=\"Twitterフォロワー数\" onClick = {add} />\n              Twitterフォロワー数\n              <input type = \"checkbox\" value = \"4\" id=\"Twitterツイート数\" onClick = {add} />\n              Twitterツイート数\n              <input type = \"checkbox\" value = \"5\" id=\"Twitter開始年月\" onClick = {add} />\n              Twitter開始年月\n              <br/>\n              <input type = \"checkbox\" value = \"6\" id=\"全国国内線乗降客数\" onClick = {add} />\n              全国国内線乗降客数\n              <input type = \"checkbox\" value = \"7\" id=\"外国人訪問率\" onClick = {add} />\n              外国人訪問率\n              <input type = \"checkbox\" value = \"8\" id=\"芸能人\" onClick = {add} />\n              芸能人など\n              <br/>\n            <button type = \"reset\">描画</button>\n            {/*onClick = {drawGraph} を追加*/}\n          </form>\n          </div>\n          <ChoroplethMapPage /> \n        </article>\n      </div>  \n  );\n}\n\nconst BeforePressingButton = () => {\n  return (\n    <div className=\"tile is-parent is-vertical\">\n        <article className=\"tile is-child notification is-grey has-text-centered\">\n          <h1 className=\"title\">ボタンを押してください。</h1>\n        </article>\n    </div>\n  );\n}\n\nconst Button = (nowShowing) => {\n  //console.log(nowShowing);\n  if (nowShowing.value === 1) {\n    return (<AboutTotal />);\n  } else if (nowShowing.value === 2) {\n    return (<AboutLocalResources />);\n  } else if (nowShowing.value === 3) {\n    return (<AboutAwareness />);\n  }else{\n    return (<BeforePressingButton />);\n  }\n};\n\nconst App = () => {\n  const [nowShowing, setNowShowing] = useState(0);\n    return (\n      <div>\n        <body>\n        <Hero />\n        <section className=\"section\">\n            <div className=\"buttons is-centered\">\n                <button className=\"button is-info is-large is-outlined\" onClick={() => setNowShowing(1)}>総合点</button>\n                <button className=\"button is-primary is-large is-outlined\" onClick={() => setNowShowing(2)}>地域資源</button>\n                <button className=\"button is-success is-large is-outlined\" onClick={() => setNowShowing(3)}>認知度</button>\n                <Button value={nowShowing} />\n            </div>\n        </section>\n        <AboutData />\n        <Footer />\n        </body>\n      </div>\n    );\n};\n\n\n/*(メモ用)\n//全体のみの場合は？\nconst data = []\n  data.push(rData.map((item) => {\n    const obj = {\n      都道府県名:item.都道府県名 \n    }\n    return obj;\n  }))\n  console.log(data);\n\n//米のみの場合で考えると？\nconst rice = rData.map((item) => {\n  const obj = {\n    都道府県:item.都道府県名,\n    米:item.米,\n    x:item.経度,\n    y:item.緯度\n  }\n  return obj;\n});\n//降順にソート \nconst r = rice.sort((a,b) => (b.米) - (a.米));\n\n\n<input type = \"checkbox\" value = \"1\" onChange = {handleChange} checked={val.includes('1')} />\n火力\n<input type = \"checkbox\" value = \"2\" onChange = {handleChange} checked={val.includes('1')} />\n水力\n<input type = \"checkbox\" value = \"3\" onChange = {handleChange} checked={val.includes('1')} />\n風力\n<input type = \"checkbox\" value = \"4\" onChange = {handleChange} checked={val.includes('1')} />\n原子力\n<input type = \"checkbox\" value = \"5\" onChange = {handleChange} checked={val.includes('1')} />\n太陽光\n<input type = \"checkbox\" value = \"6\" onChange = {handleChange} checked={val.includes('1')} />\n地熱\n<br/>\n<input type = \"checkbox\" value = \"7\" onChange = {handleChange} checked={val.includes('1')} />\n米\n<input type = \"checkbox\" value = \"8\" onChange = {handleChange} checked={val.includes('1')} />\n牛乳\n<input type = \"checkbox\" value = \"9\" onChange = {handleChange} checked={val.includes('1')} />\n肉用牛\n<input type = \"checkbox\" value = \"10\" onChange = {handleChange} checked={val.includes('1')} />\n豚\n<input type = \"checkbox\" value = \"11\" onChange = {handleChange} checked={val.includes('1')}/>\n鶏卵\n<input type = \"checkbox\" value = \"12\" onChange = {handleChange} checked={val.includes('1')} />\nプロイラー\n<input type = \"checkbox\" value = \"13\" onChange = {handleChange} checked={val.includes('1')} />\nトマト\n<input type = \"checkbox\" value = \"14\" onChange = {handleChange} checked={val.includes('1')} />\n乳牛\n<input type = \"checkbox\" value = \"15\" onChange = {handleChange} checked={val.includes('1')} />\nいちご\n<br/>\n<button type = \"reset\">描画</button> //onClick = {drawGraph} を追加する？\n*/\n  \nexport default App;","import 'bulma/css/bulma.css'\n\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.querySelector(\"#content\"));"],"sourceRoot":""}