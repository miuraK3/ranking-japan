{"version":3,"sources":["App.js","index.js"],"names":["Hero","className","Footer","AboutData","href","ChoroplethMap","features","width","height","projection","d3","scale","center","translate","path","color","domain","feature","properties","value","range","radius","rice","RankingData","map","item","都道府県","都道府県名","米","x","経度","y","緯度","sort","a","b","i","d","fill","stroke","transform","fontSize","cx","cy","r","opacity","ChoroplethMapPage","useState","setFeatures","useEffect","fetch","process","res","json","data","topojson","objects","japan","AboutLocalResources","React","val","setVal","handleChange","e","includes","target","filter","console","log","onreset","type","onChange","checked","AboutAwareness","AboutTotal","Button","nowShowing","App","setNowShowing","onClick","render","document","querySelector"],"mappings":"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","file":"static/js/main.47dacd1f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { areaRadial } from \"d3\";\n\nimport RankingData from \"./data.json\"\nconst rData = RankingData;\n//console.log(rData);\n\nconst Hero = () => {\n    return (\n      <section className = \"hero is-fluid is-danger\">\n          <div className = \"hero-body\">\n              <div className = \"container has-text-centered s-divider\">\n                  <h1 className = \"title\">魅力度ランキング</h1>\n                  <h2 className = \"subtitle\">47都道府県比較サイト</h2>\n              </div>\n          </div>\n      </section>\n    );\n};\n\nconst Footer = () => {\n    return (\n      <footer className = \"footer\">\n        <div className = \"content has-text-centered\">\n            <p>&copy; 2021 kouzuki miura</p>\n        </div>\n      </footer>\n    );\n}\n\nconst AboutData = () => {\n    return (\n      <section className=\"section\">\n        <div className=\"container has-text-centered\">\n          <h1 className=\"title\">移動先</h1>\n          <h2 className=\"subtitle\"></h2>このページは未完成です。完成版は<a href=\"https://react-jpranking.netlify.app/\">こちらのページ</a>になります！\n        </div>\n      </section>\n    );\n}\n\n//日本地図を描くプログラム\nconst ChoroplethMap = ({ features }) => {\n  const width = 1000;\n  const height = 900;\n  const projection = d3.geoMercator().scale(1600).center([139.69167, 35.68944]).translate([width/2, height/2]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#0f0\"]);\n  \n  //印\n  const radius = 25;\n  //米のみの場合で考えると？\n  const rData = RankingData;\n  const rice = rData.map((item) => {\n    const obj = {\n      都道府県:item.都道府県名,\n      米:item.米,\n      x:item.経度,\n      y:item.緯度\n    }\n    return obj;\n  });\n  //降順にソート \n  const r = rice.sort((a,b) => (b.米) - (a.米));\n  //console.log(r);\n  //〜印\n\n  return (\n    <svg width={width} height={height}>\n      <g>\n        {features.map((feature, i) => (\n          <path\n            key={i}\n            d={path(feature)}\n            fill={color(feature.properties.value)}\n            stroke=\"#7F7F7F\"\n          />\n        ))}\n      </g>\n      \n      {/*印の大きさについて*/}\n        <g transform=\"translate(width/2,height)\">\n            <text x={width-250} y={height-500} fontSize=\"20\">円の大きさ・色について</text>\n\n            <circle cx={width-250} cy={height-450} r={radius-5} fill=\"red\" opacity=\"0.5\"/>\n            <text x={width-250+radius} y={height-450} fontSize=\"20\">1位</text>\n\n            <circle cx={width-250} cy={height-400} r={radius-5} fill=\"blue\" opacity=\"0.5\"/>\n            <text x={width-250+radius} y={height-400} fontSize=\"20\">2位</text>\n\n            <circle cx={width-250} cy={height-350} r={radius-5} fill=\"yellow\" opacity=\"0.5\"/>\n            <text x={width-250+radius} y= {height-350}fontSize=\"20\">3位</text>\n\n            <circle cx={width-250} cy={height-300} r={radius-10} fill=\"black\" opacity=\"0.5\"/>\n            <text x={width-250+radius-10} y={height-300} fontSize=\"20\">3~10位</text>\n\n            <circle cx={width-250} cy={height-250} r={radius-15} fill=\"black\" opacity=\"0.5\"/>\n            <text x={width-250+radius-15} y={height-250} fontSize=\"20\">10~20位</text>\n\n            <circle cx={width-250} cy={height-200} r={radius-18} fill=\"black\" opacity=\"0.5\"/>\n            <text x={width-250+radius-18} y={height-200} fontSize=\"20\">20~30位</text>\n\n            <circle cx={width-250} cy={height-150} r={radius-20} fill=\"black\" opacity=\"0.5\"/>\n            <text x={width-250+radius-20} y={height-150} fontSize=\"20\">30~40位</text>\n        </g>\n        {/*〜印の大きさについて*/}\n\n        {/*印（米のみの場合）*/}\n        <g>\n          {rice.map((item,i) => {\n            //x=経度 y=緯度\n            const x = projection([rice[i].x, rice[i].y])[0];\n            const y = projection([rice[i].x, rice[i].y])[1];\n            //console.log(x,y);\n            return <circle cx={x} cy={y} r={radius} fill=\"red\" opacity=\"0.5\"/>;\n          })}\n        </g>\n        {/*〜印（米のみの場合）*/}\n    </svg>\n  );\n};\nexport const ChoroplethMapPage = () => {\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async() => {\n      const res = await fetch(`${process.env.PUBLIC_URL}/data/japan.json`)\n      const data = await res.json()\n      const { features } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })()\n  },[])\n  if (features == null) {\n    return <p>loading</p>;\n  }\n  return <ChoroplethMap features={features} />;\n};\n//〜日本地図を描くプログラム\n\n//地域資源についてのプログラム\nconst AboutLocalResources = () => {\n  const checkrist = [\"火力\",\"水力\",\"風力\",\"原子力\",\"太陽光\",\"地熱\",\"米\",\"牛乳\",\"肉用牛\",\"豚\",\"鶏卵\",\"プロイラー\",\"トマト\",\"乳牛\",\"いちご\"];\n  const [val, setVal] = React.useState([]);\n  const handleChange = e => {    //ONかOFFか\n    if (val.includes(e.target.value)) { // すでに含まれていればOFFしたと判断し、イベント発行元を除いた配列をsetし直す (チェックなし)\n      setVal(val.filter(item => item !== e.target.value));\n    } else { // そうでなければONと判断し、イベント発行元を末尾に加えた配列をsetし直す (チェックあり)\n      setVal([...val, e.target.value]); // stateは直接は編集できない( = val.push(e.target.value) はNG)\n    }\n  };\n  console.log(val);\n\n  {/*考え中！！\n  let ranking = [];\n  let r = [];\n  r.push(rData.map((item) => {\n    //console.log(item[e.target.value]);\n    return item[e.target.value];\n  }));\n  console.log('チェックしたもののみ');\n  console.log(r);\n  \n  ranking.push(r);\n  console.log('チェックしたもを配列に');\n  console.log(ranking);\n  //考え中！！\n  */}\n\n  return ( \n    <div className=\"tile is-parent is-vertical\">\n      <article className=\"tile is-child notification is-grey has-text-centered\">\n        <div>\n        <form onreset = \"reset\">\n        {checkrist.map((item,i) => {\n          if(i === 5){\n            return (\n              <label>\n                <input type=\"checkbox\" value={item} onChange={handleChange} checked={val.includes(item)}/>\n                {item}\n                <br />\n              </label>\n            );\n          }else{\n            return (\n              <label>\n                <input type=\"checkbox\" value={item} onChange={handleChange} checked={val.includes(item)}/>\n                {item}\n              </label>\n            );\n          }\n        })}\n        <br/>\n        <button type = \"reset\">描画</button>\n        </form>\n        </div>\n        <ChoroplethMapPage /> \n      </article>\n    </div>\n  );\n}\n\n//認知度についてのプログラム\nconst AboutAwareness = () => {\n  const ranking = [];\n  const checkrist = [\"Youtube登録者数\",\"Youtube最高再生数\",\"Twitterフォロワー数\",\"Twitterツイート数\",\"Twitter開始年月\",\"全国国内線乗降客数\",\"外国人訪問率\",\"芸能人\"];\n\n  const [val, setVal] = React.useState([]);\n  const handleChange = e => {    //ONかOFFか\n    if (val.includes(e.target.value)) { // すでに含まれていればOFFしたと判断し、イベント発行元を除いた配列をsetし直す\n      setVal(val.filter(item => item !== e.target.value));\n    } else { // そうでなければONと判断し、イベント発行元を末尾に加えた配列をsetし直す (チェックあり)\n      setVal([...val, e.target.value]); // stateは直接は編集できない( = val.push(e.target.value) はNG)\n\n    }\n  };\n  console.log(val);\n\n  return ( \n    <div className=\"tile is-parent is-vertical\">\n      <article className=\"tile is-child notification is-grey has-text-centered\">\n        <div>\n        <form onreset = \"reset\">\n        {checkrist.map((item,i) => {\n          if(i === 4){\n            return (\n              <label>\n                <input type=\"checkbox\" value={item} onChange={handleChange} checked={val.includes(item)}/>\n                {item}\n                <br />\n              </label>\n            );\n          }else{\n            return (\n              <label>\n                <input type=\"checkbox\" value={item} onChange={handleChange} checked={val.includes(item)}/>\n                {item}\n              </label>\n            );\n          }\n        })}\n        <br/>\n        <button type = \"reset\">描画</button>\n        </form>\n        </div>\n        <ChoroplethMapPage /> \n      </article>\n    </div>\n  );\n}\n\n//総合点についてのプログラム\nconst AboutTotal = () => {\n  const data = []\n  const checkrist = [\"火力\",\"水力\",\"風力\",\"原子力\",\"太陽光\",\"地熱\",\"米\",\"牛乳\",\"肉用牛\",\"豚\",\"鶏卵\",\"プロイラー\",\"トマト\",\"乳牛\",\"いちご\",\"Youtube登録者数\",\"Youtube最高再生数\",\"Twitterフォロワー数\",\"Twitterツイート数\",\"Twitter開始年月\",\"全国国内線乗降客数\",\"外国人訪問率\",\"芸能人\"];\n\n  const [val, setVal] = React.useState([]);\n  const handleChange = e => {    //ONかOFFか\n    if (val.includes(e.target.value)) { // すでに含まれていればOFFしたと判断し、イベント発行元を除いた配列をsetし直す\n      setVal(val.filter(item => item !== e.target.value));\n    } else { // そうでなければONと判断し、イベント発行元を末尾に加えた配列をsetし直す (チェックあり)\n      setVal([...val, e.target.value]); // stateは直接は編集できない( = val.push(e.target.value) はNG)\n    }\n  };\n  console.log(val);\n\n  return ( \n    <div className=\"tile is-parent is-vertical\">\n      <article className=\"tile is-child notification is-grey has-text-centered\">\n        <div>\n        <form onreset = \"reset\">\n        {checkrist.map((item,i) => {\n          if(i === 5 || i === 14 || i === 19){\n            return (\n              <label>\n                <input type=\"checkbox\" value={item} onChange={handleChange} checked={val.includes(item)}/>\n                {item}\n                <br />\n              </label>\n            );\n          }else{\n            return (\n              <label>\n                <input type=\"checkbox\" value={item} onChange={handleChange} checked={val.includes(item)}/>\n                {item}\n              </label>\n            );\n          }\n        })}\n        <br/>\n        <button type = \"reset\">描画</button>\n        </form>\n        </div>\n        <ChoroplethMapPage /> \n      </article>\n    </div>\n  );\n}\n\nconst Button = (nowShowing) => {\n  //console.log(nowShowing);\n  if (nowShowing.value === 1) {\n    return (<AboutTotal />);\n  } else if (nowShowing.value === 2) {\n    return (<AboutLocalResources />);\n  } else {\n    return (<AboutAwareness />);\n  }\n};\n\nconst App = () => {\n  const [nowShowing, setNowShowing] = useState(1);\n    return (\n      <div>\n        <Hero />\n        <section className=\"section\">\n            <div className=\"buttons is-centered\">\n                <button className=\"button is-info is-large is-outlined\" onClick={() => setNowShowing(1)}>総合点</button>\n                <button className=\"button is-primary is-large is-outlined\" onClick={() => setNowShowing(2)}>地域資源</button>\n                <button className=\"button is-success is-large is-outlined\" onClick={() => setNowShowing(3)}>認知度</button>\n                <Button value={nowShowing} />\n            </div>\n        </section>\n        <AboutData />\n        <Footer />\n      </div>\n    );\n};\n\n\n/*(メモ用)\n//全体のみの場合は？\nconst data = []\n  data.push(rData.map((item) => {\n    const obj = {\n      都道府県名:item.都道府県名 \n    }\n    return obj;\n  }))\n  console.log(data);\n\n//米のみの場合で考えると？\nconst rice = rData.map((item) => {\n  const obj = {\n    都道府県:item.都道府県名,\n    米:item.米,\n    x:item.経度,\n    y:item.緯度\n  }\n  return obj;\n});\n//降順にソート \nconst r = rice.sort((a,b) => (b.米) - (a.米));\n*/\n  \nexport default App;","import 'bulma/css/bulma.css'\n\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.querySelector(\"#content\"));"],"sourceRoot":""}