{"version":3,"sources":["App.js","index.js"],"names":["Hero","className","Footer","AboutMap","class","AboutData","Button","value","ChoroplethMap","features","projection","d3","scale","center","translate","width","height","path","color","domain","feature","properties","range","map","i","d","fill","stroke","ChoroplethMapPage","useState","setFeatures","useEffect","a","fetch","process","res","json","data","topojson","objects","japan","App","render","document","querySelector"],"mappings":"+MAAMA,EAAO,WACT,OACI,yBAASC,UAAY,0BAArB,SACI,qBAAKA,UAAY,YAAjB,SACI,sBAAKA,UAAY,wCAAjB,UACI,oBAAIA,UAAY,QAAhB,8DAGA,oBAAIA,UAAY,WAAhB,8EAOdC,EAAS,WACX,OACI,wBAAQD,UAAY,SAApB,SACI,qBAAKA,UAAY,4BAAjB,SACI,6DAMVE,EAAW,WACb,OACI,qBAAKC,MAAM,6BAAX,SACI,0BAASA,MAAM,uDAAf,UACA,oCACA,cAAC,EAAD,UAMNC,EAAY,WAChB,OACE,+BACQ,yBAASD,MAAM,UAAf,SACI,sBAAKA,MAAM,8BAAX,UACI,oBAAIA,MAAM,QAAV,sCACA,oBAAIA,MAAM,WAAV,6DAOdE,EAAS,WACX,OACI,+BACI,yBAASL,UAAU,UAAnB,SACI,sBAAKA,UAAU,sBAAf,UACI,wBAAQA,UAAU,sCAAsCM,MAAM,qBAA9D,gCACA,wBAAQN,UAAU,yCAAyCM,MAAM,2BAAjE,sCACA,wBAAQN,UAAU,yCAAyCM,MAAM,qBAAjE,wCAWdC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAGjBC,EAAaC,MAAiBC,MAAM,MAAMC,OAAO,CAAC,UAAW,WAAWC,UAAU,CAACC,IAASC,MAC5FC,EAAON,MAAaD,WAAWA,GAC/BQ,EAAQP,MAEXQ,OAAOR,IAAUF,GAAU,SAACW,GAAD,OAAaA,EAAQC,WAAWd,UAC3De,MAAM,CAAC,OAAQ,SAClB,OACE,qBAAKP,MATO,IASOC,OARN,IAQb,SACE,4BACGP,EAASc,KAAI,SAACH,EAASI,GAAV,OACZ,sBAEEC,EAAGR,EAAKG,GACRM,KAAMR,EAAME,EAAQC,WAAWd,OAC/BoB,OAAO,WAHFH,WAUJI,EAAoB,WAAO,IAAD,EACLC,mBAAS,MADJ,mBAC9BpB,EAD8B,KACpBqB,EADoB,KAUrC,OARDC,qBAAU,WACP,sBAAC,kCAAAC,EAAA,sEACmBC,MAAM,GAAD,OAAIC,iBAAJ,qBADxB,cACOC,EADP,gBAEoBA,EAAIC,OAFxB,OAEOC,EAFP,SAGsBC,IAAiBD,EAAMA,EAAKE,QAAQC,OAAjD/B,EAHT,EAGSA,SACRqB,EAAYrB,GAJb,0CAAD,KAMA,IACc,MAAZA,EACK,wCAEF,cAAC,EAAD,CAAeA,SAAUA,KAenBgC,EAZH,WACR,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QC7GRC,iBAAO,cAAC,EAAD,IAASC,SAASC,cAAc,e","file":"static/js/main.6a02cfb8.chunk.js","sourcesContent":["const Hero = () => {\n    return (\n        <section className = \"hero is-fluid is-danger\">\n            <div className = \"hero-body\">\n                <div className = \"container has-text-centered s-divider\">\n                    <h1 className = \"title\">\n                    \n                        魅力度ランキング</h1>\n                    <h2 className = \"subtitle\">47都道府県比較サイト</h2>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nconst Footer = () => {\n    return (\n        <footer className = \"footer\">\n            <div className = \"content has-text-centered\">\n                <p>&copy; 2021 kouzuki miura</p>\n            </div>\n        </footer>\n    );\n}\n\nconst AboutMap = () => {\n    return (\n        <div class=\"tile is-parent is-vertical\">\n            <article class=\"tile is-child notification is-grey has-text-centered\">\n            <p>aaa</p>\n            <ChoroplethMapPage />\n            </article>\n        </div>\n    );\n}\n\nconst AboutData = () => {\n  return (\n    <body>\n            <section class=\"section\">\n                <div class=\"container has-text-centered\">\n                    <h1 class=\"title\">データ元</h1>\n                    <h2 class=\"subtitle\">参考データは...</h2>\n                </div>\n            </section>\n        </body>\n  );\n}\n\nconst Button = () => {\n    return (\n        <body>\n            <section className=\"section\">\n                <div className=\"buttons is-centered\">\n                    <button className=\"button is-info is-large is-outlined\" value=\"総合点\">総合点</button>\n                    <button className=\"button is-primary is-large is-outlined\" value=\"地域資源\">地域資源</button>\n                    <button className=\"button is-success is-large is-outlined\" value=\"認知度\">認知度</button>\n                </div>\n            </section>\n        </body>\n    );\n}\n\nimport React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { areaRadial } from \"d3\";\nconst ChoroplethMap = ({ features }) => {\n  const width = 700;\n  const height = 800;\n  const projection = d3.geoMercator().scale(1600).center([139.69167, 35.68944]).translate([width/2, height/2]);\n  const path = d3.geoPath().projection(projection);\n  const color = d3\n    .scaleLinear()\n    .domain(d3.extent(features, (feature) => feature.properties.value))\n    .range([\"#ccc\", \"#0f0\"]);\n  return (\n    <svg width={width} height={height}>\n      <g>\n        {features.map((feature, i) => (\n          <path\n            key={i}\n            d={path(feature)}\n            fill={color(feature.properties.value)}\n            stroke=\"#7F7F7F\"\n          />\n        ))}\n      </g>\n    </svg>\n  );\n};\nexport const ChoroplethMapPage = () => {\n  const [features, setFeatures] = useState(null);\n useEffect(() => {\n    (async() => {\n      const res = await fetch(`${process.env.PUBLIC_URL}/data/japan.json`)\n      const data = await res.json()\n      const { features } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })()\n  },[])\n  if (features == null) {\n    return <p>loading</p>;\n  }\n  return <ChoroplethMap features={features} />;\n};\n\nconst App = () => {\n    return (\n      <div>\n        <Hero />\n        <Button />\n        <AboutMap />\n        <AboutData />\n        <Footer />\n      </div>\n    );\n  };\n  \nexport default App;","import 'bulma/css/bulma.css'\n\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.querySelector(\"#content\"));"],"sourceRoot":""}