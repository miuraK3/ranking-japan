{"version":3,"sources":["colorsizemap.js","Awareness.js","Resouces.js","Total.js","App.js","index.js"],"names":["ColorSizeAndMap","features","width","height","projection","d3","scale","center","translate","path","map","feature","i","color","properties","id","d","fill","stroke","x","y","fontSize","cx","cy","r","radius","opacity","AboutColorSizeAndMap","useState","setFeatures","useEffect","a","fetch","process","res","json","data","topojson","objects","japan","ChoroplethMap","setData","selected","setSelected","dataUrl","fetchData","prev","sort","b","reduce","acc","cur","normalizedValue","className","selection","type","value","onChange","e","target","checked","concat","filter","item","length","index","AboutAwareness","AboutLocalResources","selections","ranking2020","total","j","issorted","都道府県","都道府県名","経度","緯度","class","memoi","memoj","console","log","style","AboutTotal","Hero","Footer","AboutData","href","App","to","textDecoration","exact","render","document","querySelector"],"mappings":"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","file":"static/js/main.54e74254.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\n\nconst ColorSizeAndMap = ({ features }) => {\n  const width = 900;\n  const height = 900;\n  const radius = 25;\n  const projection = d3\n    .geoMercator()\n    .scale(1600)\n    .center([139.69167, 35.68944])\n    .translate([width / 2, height / 2]);\n  const path = d3.geoPath().projection(projection);\n\n  return (\n    <svg width={width} height={height}>\n      {/*日本地図の描画について*/}\n      <g>\n        {features.map((feature, i) => {\n          let color = \"#dcd6d9\";\n          if (feature.properties.id === 1){\n              color = \"#d4dcda\";\n          }else if (feature.properties.id <= 7){\n              color = \"#d3cfd9\";\n          }else if (feature.properties.id <= 14){\n              color = \"#e7e7eb\";\n          }else if (feature.properties.id <= 23){\n              color = \"#dcd6d9\";\n          }else if (feature.properties.id <= 30){\n              color = \"#d3cbc6\";\n          }else if (feature.properties.id <= 35){\n              color = \"#d4dcd6\";\n          }else if (feature.properties.id <= 39){\n              color = \"#c8c2be\";\n          }else{\n              color = \"#dcd6d9\";\n          }\n          return (<path key={i} d={path(feature)} fill={color} stroke=\"#1f3134\"/>);\n        })}\n      </g>\n      {/*〜日本地図の描画について*/}\n      {/*印の大きさについて*/}\n      <g>\n          <text x={width - 250} y={height - 500} fontSize=\"20\">円の大きさ・色について</text>\n\n          <circle cx={width - 200} cy={height - 450} r={radius - 5} fill=\"#ff0000\" opacity=\"0.7\"/>\n          <text x={width - 200 + radius} y={height - 443} fontSize=\"20\">1位</text>\n\n          <circle cx={width - 200} cy={height - 400} r={radius - 5} fill=\"#007fff\" opacity=\"0.7\"/>\n          <text x={width - 200 + radius} y={height - 393} fontSize=\"20\">2位</text>\n\n          <circle cx={width - 200} cy={height - 350} r={radius - 5} fill=\"#00ff00\" opacity=\"0.7\"/>\n          <text x={width - 200 + radius} y={height - 343} fontSize=\"20\">3位</text>\n\n          <circle cx={width - 200} cy={height - 300} r={radius - 10} fill=\"#ffff00\" opacity=\"0.7\"/>\n          <text x={width - 195 + radius - 10} y={height - 294} fontSize=\"20\">4~10位</text>\n\n          <circle cx={width - 200} cy={height - 250} r={radius - 15} fill=\"#ff7f00\" opacity=\"0.7\"/>\n          <text x={width - 195 + radius - 15} y={height - 243} fontSize=\"20\">11~20位</text>\n\n          <circle cx={width - 200} cy={height - 200} r={radius - 18} fill=\"black\" opacity=\"0.7\"/>\n          <text x={width - 195 + radius - 18} y={height - 193} fontSize=\"20\">21~30位</text>\n\n          <circle cx={width - 200} cy={height - 150} r={radius - 20} fill=\"#7fff00\" opacity=\"0.7\"/>\n          <text x={width - 195 + radius - 20} y={height - 143} fontSize=\"20\">31~40位</text>\n\n          <circle cx={width - 200} cy={height - 100} r={radius - 22} fill=\"#7f00ff\" opacity=\"0.7\"/>\n          <text x={width - 195 + radius - 22} y={height - 93} fontSize=\"20\">41~47位</text>\n        </g>\n        {/*〜印の大きさについて*/}\n    </svg>\n  );\n};\n\nexport const AboutColorSizeAndMap = () => {\n  const [features, setFeatures] = useState(null);\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(`${process.env.PUBLIC_URL}/data/japan.json`);\n      const data = await res.json();\n      const { features } = topojson.feature(data, data.objects.japan);\n      setFeatures(features);\n    })();\n  }, []);\n  if (features == null) {\n    return <p>loading</p>;\n  }\n    return <ColorSizeAndMap features={features}/>;\n};","import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { AboutColorSizeAndMap } from \"./colorsizemap\";\n\nconst ChoroplethMap = ({ features }) => {\n  const selections = [\"Youtube登録者数\",\"Youtube最高再生数\",\"Twitterフォロワー数\",\"Twitterツイート数\",\"Twitter開始年月\",\"国内線乗降客数\",\"外国人訪問率\",\"芸能人\"];\n  \n  const width = 900;\n  const height = 900;\n  const radius = 25;\n  const projection = d3\n    .geoMercator()\n    .scale(1600)\n    .center([139.69167, 35.68944])\n    .translate([width / 2, height / 2]);\n  const path = d3.geoPath().projection(projection);\n  //チェックしたデータのみを獲得\n  const [data, setData] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const dataUrl = `${process.env.PUBLIC_URL}/data/normalized_data.json`;\n  useEffect(() => {\n    async function fetchData(dataUrl) {\n      const res = await fetch(dataUrl);\n      const json = await res.json();\n      const data = json.data;\n      setData(data);\n    }\n    fetchData(dataUrl);\n  }, []);\n\n  useEffect(() => {\n    setData((prev) => [\n      ...prev.sort((a, b) => {\n        return (\n          selected.reduce((acc, cur) => acc + b[cur].normalizedValue, 0) -\n          selected.reduce((acc, cur) => acc + a[cur].normalizedValue, 0)\n        );\n      }),\n    ]);\n  }, [selected]);\n  //〜チェックしたデータのみを獲得\n  return (\n    <div className=\"box\">\n      <form>\n        <div className=\"field\">\n          <div className=\"control has-text-centered\">\n            {selections.map((selection, i) => {\n              if (i === 4) {\n                return (\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      value={selection}\n                      onChange={(e) =>\n                        setSelected((prev) => {\n                          if (e.target.checked) {\n                            return prev.concat(e.target.value);\n                          } else {\n                            return prev.filter(\n                              (item) => item !== e.target.value\n                            );\n                          }\n                        })\n                      }\n                    />\n                    {selection}\n                    <br />\n                  </label>\n                );\n              } else {\n                return (\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      value={selection}\n                      onChange={(e) =>\n                        setSelected((prev) => {\n                          if (e.target.checked) {\n                            return prev.concat(e.target.value);\n                          } else {\n                            return prev.filter(\n                              (item) => item !== e.target.value\n                            );\n                          }\n                        })\n                      }\n                    />\n                    {selection}\n                  </label>\n                );\n              }\n            })}\n          </div>\n        </div>\n      </form>\n      <svg width={width} height={height}>\n        <AboutColorSizeAndMap />\n        <g>\n          {selected.length !== 0 &&\n            data.map((item, index) => {\n              const x = projection([\n                data[index][\"経度\"],\n                data[index][\"緯度\"],\n              ])[0];\n              const y = projection([\n                data[index][\"経度\"],\n                data[index][\"緯度\"],\n              ])[1];\n\n              let r = 0;\n              let color = \"#ff0000\";\n              if (index == 0) {\n                r = radius - 5;\n                color = \"#ff0000\";\n              } else if (index == 1) {\n                r = radius - 5;\n                color = \"#007fff\";\n              } else if (index == 2) {\n                r = radius - 5;\n                color = \"#00ff00\";\n              } else if (index <= 10) {\n                r = radius - 10;\n                color = \"#ffff00\";\n              } else if (index <= 20) {\n                r = radius - 15;\n                color = \"#ff7f00\";\n              } else if (index <= 30) {\n                r = radius - 18;\n                color = \"black\";\n              } else if (index <= 40) {\n                r = radius - 20;\n                color = \"#7fff00\";\n              } else {\n                r = radius - 20;\n                color = \"#7f00ff\";\n              }\n              return (\n                <circle cx={x} cy={y} r={r} fill={color} opacity=\"0.7\" key={item[\"都道府県名\"]}/>\n              );\n            })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport const AboutAwareness = () => {\n  return <ChoroplethMap />;\n};","import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { AboutColorSizeAndMap } from \"./colorsizemap\";\n\nconst ChoroplethMap = ({ features }) => {\n  const selections = [\"米\",\"牛乳\",\"肉用牛\",\"豚\",\"鶏卵\",\"ブロイラー\",\"トマト\",\"乳牛\",\"いちご\",\"火力\",\"水力\",\"風力\",\"原子力\",\"太陽光\",\"地熱\"];\n\n  const width = 900;\n  const height = 900;\n  const radius = 25;\n  const projection = d3\n    .geoMercator()\n    .scale(1600)\n    .center([139.69167, 35.68944])\n    .translate([width / 2, height / 2]);\n  const path = d3.geoPath().projection(projection);\n  //チェックしたデータのみを獲得\n  const [data, setData] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const dataUrl = `${process.env.PUBLIC_URL}/data/normalized_data.json`;\n  useEffect(() => {\n    async function fetchData(dataUrl) {\n      const res = await fetch(dataUrl);\n      const json = await res.json();\n      const data = json.data;\n\n      setData(data);\n    }\n\n    fetchData(dataUrl);\n  }, []);\n\n  useEffect(() => {\n    setData((prev) => [\n      ...prev.sort((a, b) => {\n        return (\n          selected.reduce((acc, cur) => acc + b[cur].normalizedValue, 0) -\n          selected.reduce((acc, cur) => acc + a[cur].normalizedValue, 0)\n        );\n      }),\n    ]);\n  }, [selected]);\n  //〜チェックしたデータのみを獲得\n  return (\n    <div className=\"box\">\n      <form>\n        <div className=\"field\">\n          <div className=\"control has-text-centered\">\n          {selections.map((selection, i) => {\n              if (i === 8) {\n                return (\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      value={selection}\n                      onChange={(e) =>\n                        setSelected((prev) => {\n                          if (e.target.checked) {\n                            return prev.concat(e.target.value);\n                          } else {\n                            return prev.filter(\n                              (item) => item !== e.target.value\n                            );\n                          }\n                        })\n                      }\n                    />\n                    {selection}\n                    <br />\n                  </label>\n                );\n              } else {\n                return (\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      value={selection}\n                      onChange={(e) =>\n                        setSelected((prev) => {\n                          if (e.target.checked) {\n                            return prev.concat(e.target.value);\n                          } else {\n                            return prev.filter(\n                              (item) => item !== e.target.value\n                            );\n                          }\n                        })\n                      }\n                    />\n                    {selection}\n                  </label>\n                );\n              }\n            })}\n          </div>\n        </div>\n      </form>\n      <svg width={width} height={height}>\n        <AboutColorSizeAndMap />\n        <g>\n          {selected.length !== 0 &&\n            data.map((item, index) => {\n              const x = projection([\n                data[index][\"経度\"],\n                data[index][\"緯度\"],\n              ])[0];\n              const y = projection([\n                data[index][\"経度\"],\n                data[index][\"緯度\"],\n              ])[1];\n\n              let r = 0;\n              let color = \"#ff0000\";\n              if (index == 0) {\n                r = radius - 5;\n                color = \"#ff0000\";\n              } else if (index == 1) {\n                r = radius - 5;\n                color = \"#007fff\";\n              } else if (index == 2) {\n                r = radius - 5;\n                color = \"#00ff00\";\n              } else if (index <= 10) {\n                r = radius - 10;\n                color = \"#ffff00\";\n              } else if (index <= 20) {\n                r = radius - 15;\n                color = \"#ff7f00\";\n              } else if (index <= 30) {\n                r = radius - 18;\n                color = \"black\";\n              } else if (index <= 40) {\n                r = radius - 20;\n                color = \"#7fff00\";\n              } else {\n                r = radius - 20;\n                color = \"#7f00ff\";\n              }\n              return (\n                <circle cx={x} cy={y} r={r} fill={color} opacity=\"0.7\" key={item[\"都道府県名\"]}/>\n              );\n            })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport const AboutLocalResources = () => {\n  return <ChoroplethMap />;\n};","import React, { useEffect, useState } from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport { AboutColorSizeAndMap } from \"./colorsizemap\";\n\nconst ChoroplethMap = ({ features }) => {\n  const selections = [\"米\",\"牛乳\",\"肉用牛\",\"豚\",\"鶏卵\",\"ブロイラー\",\"トマト\",\"乳牛\",\"いちご\",\"火力\",\"水力\",\"風力\",\"原子力\",\"太陽光\",\"地熱\",\"Youtube登録者数\",\"Youtube最高再生数\",\"Twitterフォロワー数\",\"Twitterツイート数\",\"Twitter開始年月\",\"国内線乗降客数\",\"外国人訪問率\",\"芸能人\"];\n  const ranking2020 = [\"北海道\",\"京都府\",\"沖縄県\",\"東京都\",\"神奈川県\",\"大阪府\",\"奈良県\",\"長野県\",\"福岡県\",\"石川県\",\"長崎県\",\"兵庫県\",\"宮崎県\",\"静岡県\",\"青森県\",\"愛知県\",\"鹿児島県\",\"広島県\",\"熊本県\",\"秋田県\",\"千葉県\",\"宮崎県\",\"大分県\",\"愛媛県\",\"香川県\",\"富山県\",\"山梨県\",\"新潟県\",\"和歌山県\",\"島根県\",\"三重県\",\"山口県\",\"福島県\",\"岡山県\",\"岩手県\",\"高知県\",\"滋賀県\",\"埼玉県\",\"山形県\",\"鳥取県\",\"群馬県\",\"岐阜県\",\"茨城県\",\"福井県\",\"佐賀県\",\"徳島県\",\"栃木県\"];\n\n  const width = 900;\n  const height = 900;\n  const radius = 25;\n  const projection = d3\n    .geoMercator()\n    .scale(1600)\n    .center([139.69167, 35.68944])\n    .translate([width / 2, height / 2]);\n  const path = d3.geoPath().projection(projection);\n\n  const [data, setData] = useState([]);\n  const dataUrl = `${process.env.PUBLIC_URL}/data/normalized_data.json`;\n  useEffect(() => {\n    async function fetchData(dataUrl) {\n      const res = await fetch(dataUrl);\n      const json = await res.json();\n      const data = json.data;\n\n      setData(data);\n    }\n\n    fetchData(dataUrl);\n  }, []);\n\n  //全データから総合点の計算\n  const total = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];\n  data.map((item,i) => {\n    for(let j = 0; j < selections.length; j++){\n      total[i] += data[i][selections[j]].normalizedValue;\n    }\n  })\n  const result = data.map((item,i) => {\n    const obj = {\n      都道府県:item.都道府県名,\n      total:total[i],\n      x:item.経度,\n      y:item.緯度,\n    }\n    return obj;\n  });\n  const issorted = result.sort((a,b) => (b.total)-(a.total));\n\n  return (\n    <div className=\"box\">\n      <table class=\"table\">\n        <thead>\n          <tr>\n          <th>順位</th>\n          <th>都道府県名</th>\n          <th>地域ブランド調査2020結果</th>\n          <th>順位の変動</th>\n          </tr>\n        </thead>\n        <tfoot>\n          <tr>\n          <th>順位</th>\n          <th>都道府県名</th>\n          <th>地域ブランド調査2020結果</th>\n          <th>順位の変動</th>\n          </tr>\n        </tfoot>\n        <tbody>\n        {issorted.map((item,i) => {\n          if(item[\"都道府県\"] === ranking2020[i]){\n            return(\n              <tr>\n              <th>{i+1}</th>\n              <td>{item[\"都道府県\"]}\b</td>\n              <td>{ranking2020[i]}</td>\n              <td>→</td>\n              </tr>\n            );\n          }else{\n            let memoi = 0;\n            let memoj = 0;\n            for(let j = i+1; j < ranking2020.length; j++){\n              console.log(i,j,item[\"都道府県\"],ranking2020[j]);\n              if(item[\"都道府県\"] === ranking2020[j]){\n                memoi = i;\n                memoj = j;\n                console.log(memoi,memoj);\n                break;\n              }\n            }\n            if(memoi < memoj){\n                return (\n                  <tr>\n                  <th>{i+1}</th>\n                  <td>{item[\"都道府県\"]}\b</td>\n                  <td>{ranking2020[i]}</td>\n                  <td><div style={{ color: 'red' }}>↑</div></td>\n                  </tr>\n                );\n            }else{\n                return (\n                  <tr>\n                  <th>{i+1}</th>\n                  <td>{item[\"都道府県\"]}\b</td>\n                  <td>{ranking2020[i]}</td>\n                  <td><div style={{ color: 'blue' }}>↓</div></td>\n                  </tr>\n                );\n            }\n          }\n        })}\n        </tbody>\n      </table>\n\n      <svg width={width} height={height}>\n        <AboutColorSizeAndMap />\n        <g>\n          {issorted.map((item, index) => {\n            const x = projection([\n              issorted[index][\"x\"],\n              issorted[index][\"y\"],\n            ])[0];\n            const y = projection([\n              issorted[index][\"x\"],\n              issorted[index][\"y\"],\n            ])[1];\n\n            let r = 0;\n            let color = \"#ff0000\";\n            if (index == 0) {\n              r = radius - 5;\n              color = \"#ff0000\";\n            } else if (index == 1) {\n              r = radius - 5;\n              color = \"#007fff\";\n            } else if (index == 2) {\n              r = radius - 5;\n              color = \"#00ff00\";\n            } else if (index <= 10) {\n              r = radius - 10;\n              color = \"#ffff00\";\n            } else if (index <= 20) {\n              r = radius - 15;\n              color = \"#ff7f00\";\n            } else if (index <= 30) {\n              r = radius - 18;\n              color = \"black\";\n            } else if (index <= 40) {\n              r = radius - 20;\n              color = \"#7fff00\";\n            } else {\n              r = radius - 20;\n              color = \"#7f00ff\";\n            }\n            return (\n              <circle cx={x} cy={y} r={r} fill={color} opacity=\"0.7\" key={item[\"都道府県名\"]}/>\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport const AboutTotal = () => {\n  return <ChoroplethMap />;\n};","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { AboutAwareness } from \"./Awareness\";\nimport { AboutLocalResources } from \"./Resouces\";\nimport { AboutTotal } from \"./Total\";\n\nconst Hero = () => {\n    return (\n      <section className = \"hero is-fluid is-danger\">\n          <div className = \"hero-body\">\n              <div className = \"container has-text-centered s-divider\">\n                  <h1 className = \"title\">魅力度ランキング</h1>\n                  <h2 className = \"subtitle\">47都道府県比較サイト</h2>\n              </div>\n          </div>\n      </section>\n    );\n};\n\nconst Footer = () => {\n    return (\n      <footer className = \"footer\">\n        <div className = \"content has-text-centered\">\n            <p>&copy; 2021 kouzuki miura</p>\n        </div>\n      </footer>\n    );\n}\n\nconst AboutData = () => {\n    return (\n      <section className=\"section\">\n        <div className=\"container has-text-centered\">\n          <h1 className=\"title\">移動先</h1>\n          <h2 className=\"subtitle\"></h2>このページは未完成です。完成版は<a href=\"https://react-jpranking.netlify.app/\">こちらのページ</a>になります！\n        </div>\n      </section>\n    );\n}\n\nconst App = () => {\n  return (\n    <Router>\n      <Hero />\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-vertical\">\n            <div className=\"tile is-parent\">\n              <article className=\"tile is-child box\">\n                <div className=\"content\">\n                  <section className=\"section\">\n                   <div className=\"buttons is-centered\">\n                    <Link to=\"/\" style={{ textDecoration: \"none\" }}>\n                      <button className=\"button is-link is-large is-outlined\">\n                        <p className=\"title is-1\">1 総合点</p>\n                      </button>\n                    </Link>\n                    <Link to=\"/local\" style={{ textDecoration: \"none\" }}>\n                      <button className=\"button is-primary is-large is-outlined\">\n                        <p className=\"title is-1\">2 地域資源</p>\n                      </button>\n                    </Link>\n                    <Link to=\"/awareness\" style={{ textDecoration: \"none\" }}>\n                      <button className=\"button is-danger is-large is-outlined\">\n                        <p className=\"title is-1\">3 認知度</p>\n                      </button>\n                    </Link>\n                   </div>\n                    <Route path=\"/\" exact>\n                      <AboutTotal />\n                    </Route>\n                    <Route path=\"/local\" exact>\n                      <AboutLocalResources />\n                    </Route>\n                    <Route path=\"/awareness\" exact>\n                      <AboutAwareness />\n                    </Route>\n                  </section>\n                </div>\n              </article>\n            </div>\n          </div>\n        </div>\n      <AboutData />\n      <Footer />\n    </Router>\n  )\n};\n\nexport default App;","import 'bulma/css/bulma.css'\n\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\nrender(<App />, document.querySelector(\"#content\"));"],"sourceRoot":""}